%%For converting this code to AUE, change dataNAUE,358 and corresponding
%%column numbers.
%% Import data from text file.
% Script for importing data from the following text file:
%
%    X:\Experiments\Testing assumptions\Touch vs prick\pointtestPhases.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/11/22 11:09:30

%% Initialize variables.
filename = 'X:\Experiments\Testing assumptions\Touch vs prick\pointtestPhases.csv';
delimiter = ';';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
pointtestPhases = cell2mat(raw);
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%%Original code begins here%%
cd('X:\Experiments\Testing assumptions\Touch vs prick\Individual cases')
d=dir('*.csv');   % return the list of csv files
for i=1:length(d)
  rawData{i}=dlmread(d(i).name,';',1,0);   % put into cell array
end
%%To extract the column index of the element in rawdata-time which is 
%%just less than the element in the cumulative time duration in data_AUE
%%The fetched column number is the one that has the element which is just
%%below the cut-off time duration

Z = nan(2,330);
for iRow = 1:2
    for iColBlock = 1:10
        Z(iRow,33*(iColBlock-1)+1 : 33*iColBlock) = pointtestPhases(33*(iRow-1)+1:33*iRow,iColBlock);
    end 
end
M = [Z(:,33:34), Z(:,133:330)];

StartTime = M(:,4:35)'; %%Picking the starttime values only

for p = 1:2
[m(p),n(p)] = size(rawData{1,p});
for i = 1:32
a = StartTime(i,p);   
x(i,p) = find(a > rawData{1,p}(1:end-1) & a < rawData{1,p}(2:end),1);
end
CutoffP = [x; m];
end

%%Split the matrix into an array of matrices based on the indices for
%%cutting off the column (x)
Cutoffcol = [CutoffP(1,:); (diff(CutoffP))];
for n = 1:2
j= 1:33;
SplitM(n,j) = mat2cell(rawData{1,n},(Cutoffcol(j,n)),[10]); %%cuts off rawData with all 10 columns in it
end

%%Find the maximum velocity in each of the 33 segments
for n = 1:2;
for k=1:33;
MaxV(n,k) = max(SplitM{n,k}(:,9)); %% 9th column corresponds to velocity
MaxAcc(n,k) = max(SplitM{n,k}(:,10)); %%10th column corresponds to acceleration
MinAcc(n,k) = min(SplitM{n,k}(:,10));
AbsMaxAcc(n,k) = max(abs(SplitM{n,k}(:,10)));
end
MaxV(n,k) = max(SplitM{n,k}(:,9));
MaxAcc(n,k) = max(SplitM{n,k}(:,10));
MinAcc(n,k) = min(SplitM{n,k}(:,10));
AbsMaxAcc(n,k) = max(abs(SplitM{n,k}(:,10)));
end

peakVel = [M(:,1) MaxV];
peakAcc = [M(:,1) AbsMaxAcc];
%%Put peakVel and peakAcc in alternate columns
peakVelAcc = reshape([peakVel;peakAcc],size(peakVel,1),[]);
%%To find a segment of rawdata, go to SplitM.
