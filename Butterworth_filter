%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% -Before running this function, load patients,
%       load('Results/20171220_patients_modifiedPaper1.mat')
%
%% Filtering velocity data
%% Commands used are 'butter' and 'filtfilt'

function Filter_Revision_Paper1()

patients = evalin('caller','patients');

for iUE=1:2
for i=1:numel(patients)
        for j=1:9
                if(~gf.isempty('patients{i}.sessions{j}.UE{iUE}.detailedData.vel{33}'))
                patients{i}.sessions{j}.UE{iUE}.pointtestPhases.tIndexPerPeak = cell(33,1);    %% 33 is the number of segments
                for k = 1:33
                    velMagnitude = (sqrt(diff(patients{i}.sessions{j}.UE{iUE}.detailedData.x{k}).^2+diff(patients{i}.sessions{j}.UE{iUE}.detailedData.y{k}).^2+diff(patients{i}.sessions{j}.UE{iUE}.detailedData.z{k}).^2)./diff(patients{i}.sessions{j}.UE{iUE}.detailedData.t{k}));
                    rate = 50; %% frame rate = 50
                    freq = 6; %% cut off frequency = 8
                    try
                    [b, a] = butter(2, freq / (rate / 2), 'low'); %%Order is 1, rate*2
                    velocityIn = (velMagnitude);
                    velocityOut = filtfilt(b,a,velocityIn);
                    catch
                    [b, a] = butter(1, freq / (rate / 2), 'low'); %%Order is 1, rate*2, for patient ID 147 session 3, UE 1 and segment 31 only. There are less than 6 values in this segment.    
                    velocityIn = (velMagnitude);
                    velocityOut = filtfilt(b,a,velocityIn);
                    %%Uncomment the below line to see the segments where
                    %%order 1 is applied. 
                    %disp(['[i,j,iUE,k] = ',mat2str([i,j,iUE,k])])
                    end
                    patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k} = velocityOut;
                    %% -Find Peaks
                    [~,patients{i}.sessions{j}.UE{iUE}.pointtestPhases.tIndexPerPeak{k}] = library1.findPeaks(patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k});
                    patients{i}.sessions{j}.UE{iUE}.pointtestPhases.nPeaks(k) = numel(patients{i}.sessions{j}.UE{iUE}.pointtestPhases.tIndexPerPeak{k});
                    
%                     %% -Find Peaks
%                     boundaryForHighPeaks = [0.25,Inf];
%                     boundaryForSmallPeaks = [0.15,0.25];
%                     [peakValues,peakValuesLocations] = findpeaks(patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k});     %% NOTE: peakValuesLocations are x value indices (not real x values)
%                     [peakValues,peakValuesLocations] = library1.filterPeaks(peakValues,peakValuesLocations,patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k});
%                     patients{i}.sessions{j}.UE{iUE}.pointtestPhases.nLargePeaks(k) = sum(peakValues>=boundaryForHighPeaks(1) & peakValues<=boundaryForHighPeaks(2));
%                     patients{i}.sessions{j}.UE{iUE}.pointtestPhases.nSmallPeaks(k) = sum(peakValues>=boundaryForSmallPeaks(1) & peakValues<=boundaryForSmallPeaks(2));
%                     %% -Find Dips
%                     boundaryForDips = [0,0.1];
%                     maxValue = max(patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k});
%                     [dipValues,dipValuesLocations] = findpeaks(maxValue-patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k});     %% NOTE: dipValuesLocations are x value indices (not real x values)
%                     [dipValues,dipValuesLocations] = library1.filterPeaks(dipValues,dipValuesLocations,patients{i}.sessions{j}.UE{iUE}.detailedData.velocityOut{k});
%                     dipValues = maxValue-dipValues;
%                     patients{i}.sessions{j}.UE{iUE}.pointtestPhases.nNearZero(k) = sum(dipValues>=boundaryForDips(1) & dipValues<=boundaryForDips(2));
                end
                end
        end
end
end

if(1)
t = patients{108}.sessions{2}.UE{1}.detailedData.t{25}(2:end);
plot(t,patients{108}.sessions{2}.UE{1}.detailedData.vel{25}(2:end)); hold on;
plot(t,patients{108}.sessions{2}.UE{1}.detailedData.velocityOut{25});
tIndexPerPeak = patients{108}.sessions{2}.UE{1}.pointtestPhases.tIndexPerPeak{25};
plot(t(tIndexPerPeak),patients{108}.sessions{2}.UE{1}.detailedData.velocityOut{25}(tIndexPerPeak),'*')

% %% -Finding peaks
% thresholForHighPeaks = 0.25;
% [peakValues,peakValuesLocations] = findpeaks(patients{108}.sessions{2}.UE{1}.detailedData.velocityOut{25});     %% NOTE: peakValuesLocations are x value indices (not real x values)
% [peakValues,peakValuesLocations] = library1.filterPeaks(peakValues,peakValuesLocations,patients{108}.sessions{2}.UE{1}.detailedData.velocityOut{25});
% 
% plot(t(peakValuesLocations(peakValues>=thresholForHighPeaks)),peakValues(peakValues>=thresholForHighPeaks),'*');       %% Plotting high peaks
% plot(t(peakValuesLocations(peakValues<thresholForHighPeaks)),peakValues(peakValues<thresholForHighPeaks),'s');       %% Plotting low peaks
end

assignin('base', 'patients', patients);
end


%%Plotting healthy controls%%
if(0)
for i = 509
t2 = patients{i}.sessions{9}.UE{1}.detailedData.t{25}(2:end); hold on;
plot(t2,patients{i}.sessions{9}.UE{1}.detailedData.velocityOut{25});
tIndexPerPeak = patients{i}.sessions{9}.UE{1}.pointtestPhases.tIndexPerPeak{25};
plot(t2(tIndexPerPeak),patients{i}.sessions{9}.UE{1}.detailedData.velocityOut{25}(tIndexPerPeak),'*')
% hold on
end

for i = 108
t2 = patients{i}.sessions{2}.UE{1}.detailedData.t{25}(2:end); hold on;
plot(t2,patients{i}.sessions{2}.UE{1}.detailedData.velocityOut{25});
tIndexPerPeak = patients{i}.sessions{2}.UE{1}.pointtestPhases.tIndexPerPeak{25};
plot(t2(tIndexPerPeak),patients{i}.sessions{2}.UE{1}.detailedData.velocityOut{25}(tIndexPerPeak),'*')
% hold on
end

end
